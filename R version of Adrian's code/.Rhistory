#---------    %% Fit skewed-t distribution for in-sample unconditional quantiles
{
QuantilesInterpolation_env <- new.env()
source("QuantilesInterpolation.r",local = QuantilesInterpolation_env)
# Fit skewed-t distribution for in-sample unconditional quantiles
qqTarg <- YQunc_IS[nrow(YQunc_IS), ]
list_params <- QuantilesInterpolation_env$QuantilesInterpolation(qqTarg, QQ) #corretto!!
lc <- list_params$lc
sc <- list_params$sc
sh <- list_params$sh
df <- list_params$df
# Assign values to matrices based on the skewed-t fit
densities <- dst(YY, xi = lc, omega = sc, alpha = sh, nu = df)
replicated_matrix <- matrix(rep(densities, each = length(Time) - h), ncol = length(densities))
PSTunc_IS[(h + 1):nrow(PSTunc_IS), ] <- replicated_matrix
densities <- qst(QQ, xi = lc, omega = sc, alpha = sh, nu = df)
replicated_matrix <- matrix(rep(densities, each = length(Time) - h), ncol = length(densities))
QSTunc_IS[(h + 1):nrow(QSTunc_IS), ] <- replicated_matrix
densities <- pst(YY, xi = lc, omega = sc, alpha = sh, nu = df)
replicated_matrix <- matrix(rep(densities, each = length(Time) - h), ncol = length(densities))
CSTunc_IS[(h + 1):nrow(CSTunc_IS), ] <- replicated_matrix
STparunc_IS[(h + 1):nrow(STparunc_IS), ] <- matrix(rep(c(lc, sc, sh, df), times = length(Time) - h),
nrow = length(Time) - h,
byrow = TRUE)
ScoreSTunc_IS[(h + 1):length(Yh)] <- dst(Yh[(h + 1):length(Yh)], xi = lc, omega = sc, alpha = sh, nu = df) #1x172, su matlab è 171x1, vediamo se causa problemi
PitSTunc_IS[(h + 1):length(Yh)] <- pst(Yh[(h + 1):length(Yh)], xi = lc, omega = sc, alpha = sh, nu = df) #1x172, su matlab è 171x1, vediamo se causa problemi
}
#---------------------    %% Fit t-densities for in-sample and out-of-sample estimation
{
for (jt in 1:(length(Time) - h)) { #-50 da togliere
month_val <- as.numeric(format(Time[jt], "%m"))
year_val <- as.numeric(format(Time[jt], "%Y"))
if (month_val == 1 && jt >= jtFirstOOS) {
cat(sprintf("Computing in-sample and out-of-sample predictive densities in %d", year_val), "\n")
} else {
cat(sprintf("Computing in-sample predictive densities in %d", year_val), "\n")
}
YhRealized <- Yh[jt + h]
qqTarg <- YQ_IS[jt + h, ]
params <- QuantilesInterpolation_env$QuantilesInterpolation(qqTarg, QQ)  # You might need to adjust this function to return params in appropriate format for dst, qst, pst
lc <- params$lc
sc <- params$sc
sh <- params$sh
df <- params$df
PST_IS[jt + h, ] <- dst(YY, lc, sc, sh, df) #uguale a matlab, almeno per le prime iterazioni
QST_IS[jt + h, ] <- qst(QQ, lc, sc, sh, df)
CST_IS[jt + h, ] <- pst(YY, lc, sc, sh, df)
STpar_IS[jt + h, ] <- c(lc, sc, sh, df)
ScoreST_IS[jt + h ] <- dst(YhRealized, lc, sc, sh, df)
PitST_IS[jt + h ] <- pst(YhRealized, lc, sc, sh, df)
Temp <- PST_IS[jt + h, ] * (YY < QST_IS[jt + h, jq50])
LeftEntropy_IS[jt + h] <- -sum((log(PSTunc_IS[jt + h, ]) - log(PST_IS[jt + h, ])) * Temp * deltaYY) #CORRETTO!
# Similar computations for GDP only
qqTarg_GDPonly <- YQGDPonly_IS[jt + h, ]
params <- QuantilesInterpolation_env$QuantilesInterpolation(qqTarg_GDPonly, QQ)
lc <- params$lc
sc <- params$sc
sh <- params$sh
df <- params$df
PSTGDPonly_IS[jt + h, ] <- dst(YY, lc, sc, sh, df)
QSTGDPonly_IS[jt + h, ] <- qst(QQ, lc, sc, sh, df)
CSTGDPonly_IS[jt + h, ] <- pst(YY, lc, sc, sh, df) #uguale a matlab, almeno per le prime iterazioni
STparGDPonly_IS[jt + h, ] <- c(lc, sc, sh, df)
ScoreSTGDPonly_IS[jt + h] <- dst(YhRealized, lc, sc, sh, df)
PitSTGDPonly_IS[jt + h] <- pst(YhRealized, lc, sc, sh, df) #uguale a matlab, almeno per le prime iterazioni
if (jt >= jtFirstOOS) {
if (month(Time[jt]) == 1) {
cat(sprintf("Now computing the real-time predictive densities in %d", year(Time[jt])), "\n")
}
for (jq in 1:length(QQ)) {
# Quantile regression with both NFCI and GDP, out-of-sample
b <- rq(Yh[(h + 1):jt] ~ Z[1:(jt - h),-1], QQ[jq])
YQ_OOS[jt + h, jq] <- Z[jt, ] %*% coef(b)
# b <- rq(Yh[(h + 1):length(Yh)] ~ Z[1:(length(Yh) - h),-1], tau=QQ[jq]) this is in sample, for comparison
# YQ_IS[(h + 1):length(Yh), jq] <- as.vector(Z[1:(length(Yh) - h),] %*% coef(b))
#
# Quantile regression with GDP only, out-of-sample
bGDPonly <- rq(Yh[(h + 1):jt] ~ ZGDPonly[1:(jt- h),-1], tau=QQ[jq])
YQGDPonly_OOS[jt + h, jq] <- ZGDPonly[jt, ] %*% coef(bGDPonly)
# Unconditional quantiles, out-of-sample
bunc <- rq(Yh[(h + 1):jt ] ~ 1, QQ[jq])
YQunc_OOS[jt + h, jq] <- coef(bunc)
#YQunc_IS[(h + 1):length(Yh), jq] <- rep(coef(bunc), length(Time) - h)
}
# Fit skewed-t distribution for quantile regression with NFCI and GDP, out-of-sample
params <- QuantilesInterpolation_env$QuantilesInterpolation(YQ_OOS[jt + h, ], QQ)
PST_OOS[jt + h, ] <- dst(YY, params$lc, params$sc, params$sh, params$df)
QST_OOS[jt + h, ] <- qst(QQ, params$lc, params$sc, params$sh, params$df)
CST_OOS[jt + h, ] <- pst(YY, params$lc, params$sc, params$sh, params$df)
STpar_OOS[jt + h, ] <- c(params$lc, params$sc, params$sh, params$df)
ScoreST_OOS[jt + h] <- dst(YhRealized, params$lc, params$sc, params$sh, params$df)
PitST_OOS[jt + h] <- pst(YhRealized, params$lc, params$sc, params$sh, params$df)
# Fit skewed-t distribution for quantile regression with GDP only, out-of-sample
params_GDPonly <- QuantilesInterpolation_env$QuantilesInterpolation(YQGDPonly_OOS[jt + h, ], QQ)
PSTGDPonly_OOS[jt + h, ] <- dst(YY, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
QSTGDPonly_OOS[jt + h, ] <- qst(QQ, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
CSTGDPonly_OOS[jt + h, ] <- pst(YY, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
STparGDPonly_OOS[jt + h, ] <- c(params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
ScoreSTGDPonly_OOS[jt + h] <- dst(YhRealized, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
PitSTGDPonly_OOS[jt + h] <- pst(YhRealized, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
# Fit skewed t-distribution for unconditional quantiles, out-of-sample
params_unc <- QuantilesInterpolation_env$QuantilesInterpolation(YQunc_OOS[jt + h, ], QQ)
PSTunc_OOS[jt + h, ] <- dst(YY, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
QSTunc_OOS[jt + h, ] <- qst(QQ, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
CSTunc_OOS[jt + h, ] <- pst(YY, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
STparunc_OOS[jt + h, ] <- c(params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
ScoreSTunc_OOS[jt + h] <- dst(YhRealized, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
PitSTunc_OOS[jt + h] <- pst(YhRealized, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
# Compute entropy for skewed t-distribution from quantile regression with GDP and NFCI, out-of-sample
Temp <- PST_OOS[jt + h, ] * (YY < QST_OOS[jt + h, jq50])
LeftEntropy_OOS[jt + h] <- -sum((log(PSTunc_OOS[jt + h, ]) - log(PST_OOS[jt + h, ])) * Temp * deltaYY)
}
}
}
}
}
# Install and load necessary packages
library(quantreg)
library(lubridate)
library(pracma)
library(readxl)
library(sn)
library(quantreg)
# Clear workspace
rm(list = ls())
# Set forecast horizon (run script separately for h = 1 and h = 4)
h <- 4
loadsavedresults = TRUE; # If I run code already and results are stored in ResOOS_H
# Graphics settings - R's graphics system differs from MATLAB's, so some modifications are necessary
par(mfrow = c(1, 1))  # Reset plot window to single pane
# Load data
file_path <- "DataVulnerabilityAppendix.xls"
# Read the file
data <- read_excel(file_path)
data<-data[,1:3]
# Filter data for 1973Q1-2015Q4
colnames(data)[1] <- "Time"
data$Time <- as.Date(data$Time)
# Subset the data
data <- data[data$Time >= as.Date("1973-01-01") & data$Time <= as.Date("2015-10-01"), ]
X <- data[,2:3]
Time <- data$Time
# Set forecast settings
QQ <- seq(0.05, 0.95, by = 0.05)
deltaYY <- 0.1
YY <- seq(-20, 20, by = deltaYY)
jtFirstOOS <- which(year(data$Time) == 1993 & month(data$Time) == 1)
indices <- which(QQ %in% c(0.05, 0.25, 0.5, 0.75, 0.95))
jq05 <- indices[1]
jq25 <- indices[2]
jq50 <- indices[3]
jq75 <- 15 #piccolo cheatcode per farlo venire
jq95 <- 19 #piccolo cheatcode per farlo venire
# Construct average growth rates
y <- X$A191RL1Q225SBEA
Yh <- matrix(0, nrow=length(y), ncol=4)
Yh <- filter(y, rep(1/h, h), sides=1)
if (h>1){
Yh[1:(h-1)] <- NA
}
#Construct matrices of regressors
Z <- cbind(1, X[,2], y)
ZGDPonly <- cbind(1, y)
Z <-as.matrix(Z)
if (loadsavedresults == FALSE) {
#----------------------- In-sample and out-of-sample estimation/forecasting
{
# Get length of Time and QQ/YY
len_time <- length(data$Time)
len_qq <- length(QQ)
len_yy <- length(YY)
# Initialize matrices to store forecasts
# Raw quantiles
YQ_NaNs <- matrix(NA, len_time, len_qq)
YQ_IS <- YQ_NaNs
YQ_OOS <- YQ_NaNs
YQGDPonly_IS <- YQ_NaNs
YQGDPonly_OOS <- YQ_NaNs
YQunc_IS <- YQ_NaNs
YQunc_OOS <- YQ_NaNs
# PDFs (evaluated over grid)
P_NaNs <- matrix(NA, len_time, len_yy)
PST_IS <- P_NaNs
PST_OOS <- P_NaNs
PSTGDPonly_IS <- P_NaNs
PSTGDPonly_OOS <- P_NaNs
PSTunc_IS <- P_NaNs
PSTunc_OOS <- P_NaNs
# Smoothed quantiles
Q_NaNs <- matrix(NA, len_time, len_qq)
QST_IS <- Q_NaNs
QST_OOS <- Q_NaNs
QSTGDPonly_IS <- Q_NaNs
QSTGDPonly_OOS <- Q_NaNs
QSTunc_IS <- Q_NaNs
QSTunc_OOS <- Q_NaNs
# CDFs (evaluated over grid)
C_NaNs <- matrix(NA, len_time, len_yy)
CST_IS <- C_NaNs
CST_OOS <- C_NaNs
CSTGDPonly_IS <- C_NaNs
CSTGDPonly_OOS <- C_NaNs
CSTunc_IS <- C_NaNs
CSTunc_OOS <- C_NaNs
# Skewed t-distribution parameters
STpar_NaNs <- matrix(NA, len_time, 4)
STpar_IS <- STpar_NaNs
STpar_OOS <- STpar_NaNs
STparGDPonly_IS <- STpar_NaNs
STparGDPonly_OOS <- STpar_NaNs
STparunc_IS <- STpar_NaNs
STparunc_OOS <- STpar_NaNs
# Predictive scores
Score_NaNs <- rep(NA, len_time)
ScoreST_IS <- Score_NaNs
ScoreST_OOS <- Score_NaNs
ScoreSTGDPonly_IS <- Score_NaNs
ScoreSTGDPonly_OOS <- Score_NaNs
ScoreSTunc_IS <- Score_NaNs
ScoreSTunc_OOS <- Score_NaNs
# Probability integral transforms
Pit_NaNs <- rep(NA, len_time)
PitST_IS <- Pit_NaNs
PitST_OOS <- Pit_NaNs
PitSTGDPonly_IS <- Pit_NaNs
PitSTGDPonly_OOS <- Pit_NaNs
PitSTunc_IS <- Pit_NaNs
PitSTunc_OOS <- Pit_NaNs
# Left entropy
Entropy_NaNs <- rep(NA, len_time)
LeftEntropy_IS <- Entropy_NaNs
LeftEntropy_OOS <- Entropy_NaNs
}
#-------------------    %% In-sample estimation of conditional quantiles
{
# In-sample estimation of conditional quantiles
for (jq in 1:length(QQ)) {
# Quantile regression with both NFCI and GDP
b <- rq(Yh[(h + 1):length(Yh)] ~ Z[1:(length(Yh) - h),-1], tau=QQ[jq])
YQ_IS[(h + 1):length(Yh), jq] <- as.vector(Z[1:(length(Yh) - h),] %*% coef(b)) #I train the model on ((h + 1):length(Yh))-points and I store the estimation of the quantiles for each of this point. Every column represent a different quantile
# Quantile regression with GDP only
bGDPonly <- rq(Yh[(h + 1):length(Yh)] ~ ZGDPonly[1:(length(Yh) - h),-1], tau=QQ[jq])
YQGDPonly_IS[(h + 1):length(Yh), jq] <- as.vector(ZGDPonly[1:(length(Yh) - h),] %*% coef(bGDPonly))
# Unconditional quantiles (quantile regression on constant)
bunc <- rq(Yh[(h + 1):length(Yh)] ~ 1, tau=QQ[jq])
YQunc_IS[(h + 1):length(Yh), jq] <- rep(coef(bunc), length(Time) - h)
}
}
}
# Clear workspace
rm(list = ls())
# Set forecast horizon (run script separately for h = 1 and h = 4)
h <- 4
loadsavedresults = TRUE; # If I run code already and results are stored in ResOOS_H
# Graphics settings - R's graphics system differs from MATLAB's, so some modifications are necessary
par(mfrow = c(1, 1))  # Reset plot window to single pane
# Load data
file_path <- "DataVulnerabilityAppendix.xls"
# Read the file
data <- read_excel(file_path)
data<-data[,1:3]
# Filter data for 1973Q1-2015Q4
colnames(data)[1] <- "Time"
data$Time <- as.Date(data$Time)
# Subset the data
data <- data[data$Time >= as.Date("1973-01-01") & data$Time <= as.Date("2015-10-01"), ]
X <- data[,2:3]
Time <- data$Time
# Set forecast settings
QQ <- seq(0.05, 0.95, by = 0.05)
deltaYY <- 0.1
YY <- seq(-20, 20, by = deltaYY)
jtFirstOOS <- which(year(data$Time) == 1993 & month(data$Time) == 1)
indices <- which(QQ %in% c(0.05, 0.25, 0.5, 0.75, 0.95))
jq05 <- indices[1]
jq25 <- indices[2]
jq50 <- indices[3]
jq75 <- 15 #piccolo cheatcode per farlo venire
jq95 <- 19 #piccolo cheatcode per farlo venire
# Construct average growth rates
y <- X$A191RL1Q225SBEA
Yh <- matrix(0, nrow=length(y), ncol=4)
Yh <- filter(y, rep(1/h, h), sides=1)
if (h>1){
Yh[1:(h-1)] <- NA
}
#Construct matrices of regressors
Z <- cbind(1, X[,2], y)
ZGDPonly <- cbind(1, y)
Z <-as.matrix(Z)
if (loadsavedresults == FALSE) {
#----------------------- In-sample and out-of-sample estimation/forecasting
{
# Get length of Time and QQ/YY
len_time <- length(data$Time)
len_qq <- length(QQ)
len_yy <- length(YY)
# Initialize matrices to store forecasts
# Raw quantiles
YQ_NaNs <- matrix(NA, len_time, len_qq)
YQ_IS <- YQ_NaNs
YQ_OOS <- YQ_NaNs
YQGDPonly_IS <- YQ_NaNs
YQGDPonly_OOS <- YQ_NaNs
YQunc_IS <- YQ_NaNs
YQunc_OOS <- YQ_NaNs
# PDFs (evaluated over grid)
P_NaNs <- matrix(NA, len_time, len_yy)
PST_IS <- P_NaNs
PST_OOS <- P_NaNs
PSTGDPonly_IS <- P_NaNs
PSTGDPonly_OOS <- P_NaNs
PSTunc_IS <- P_NaNs
PSTunc_OOS <- P_NaNs
# Smoothed quantiles
Q_NaNs <- matrix(NA, len_time, len_qq)
QST_IS <- Q_NaNs
QST_OOS <- Q_NaNs
QSTGDPonly_IS <- Q_NaNs
QSTGDPonly_OOS <- Q_NaNs
QSTunc_IS <- Q_NaNs
QSTunc_OOS <- Q_NaNs
# CDFs (evaluated over grid)
C_NaNs <- matrix(NA, len_time, len_yy)
CST_IS <- C_NaNs
CST_OOS <- C_NaNs
CSTGDPonly_IS <- C_NaNs
CSTGDPonly_OOS <- C_NaNs
CSTunc_IS <- C_NaNs
CSTunc_OOS <- C_NaNs
# Skewed t-distribution parameters
STpar_NaNs <- matrix(NA, len_time, 4)
STpar_IS <- STpar_NaNs
STpar_OOS <- STpar_NaNs
STparGDPonly_IS <- STpar_NaNs
STparGDPonly_OOS <- STpar_NaNs
STparunc_IS <- STpar_NaNs
STparunc_OOS <- STpar_NaNs
# Predictive scores
Score_NaNs <- rep(NA, len_time)
ScoreST_IS <- Score_NaNs
ScoreST_OOS <- Score_NaNs
ScoreSTGDPonly_IS <- Score_NaNs
ScoreSTGDPonly_OOS <- Score_NaNs
ScoreSTunc_IS <- Score_NaNs
ScoreSTunc_OOS <- Score_NaNs
# Probability integral transforms
Pit_NaNs <- rep(NA, len_time)
PitST_IS <- Pit_NaNs
PitST_OOS <- Pit_NaNs
PitSTGDPonly_IS <- Pit_NaNs
PitSTGDPonly_OOS <- Pit_NaNs
PitSTunc_IS <- Pit_NaNs
PitSTunc_OOS <- Pit_NaNs
# Left entropy
Entropy_NaNs <- rep(NA, len_time)
LeftEntropy_IS <- Entropy_NaNs
LeftEntropy_OOS <- Entropy_NaNs
}
#-------------------    %% In-sample estimation of conditional quantiles
{
# In-sample estimation of conditional quantiles
for (jq in 1:length(QQ)) {
# Quantile regression with both NFCI and GDP
b <- rq(Yh[(h + 1):length(Yh)] ~ Z[1:(length(Yh) - h),-1], tau=QQ[jq])
YQ_IS[(h + 1):length(Yh), jq] <- as.vector(Z[1:(length(Yh) - h),] %*% coef(b)) #I train the model on ((h + 1):length(Yh))-points and I store the estimation of the quantiles for each of this point. Every column represent a different quantile
# Quantile regression with GDP only
bGDPonly <- rq(Yh[(h + 1):length(Yh)] ~ ZGDPonly[1:(length(Yh) - h),-1], tau=QQ[jq])
YQGDPonly_IS[(h + 1):length(Yh), jq] <- as.vector(ZGDPonly[1:(length(Yh) - h),] %*% coef(bGDPonly))
# Unconditional quantiles (quantile regression on constant)
bunc <- rq(Yh[(h + 1):length(Yh)] ~ 1, tau=QQ[jq])
YQunc_IS[(h + 1):length(Yh), jq] <- rep(coef(bunc), length(Time) - h)
}
}
#---------    %% Fit skewed-t distribution for in-sample unconditional quantiles
{
QuantilesInterpolation_env <- new.env()
source("QuantilesInterpolation.r",local = QuantilesInterpolation_env)
# Fit skewed-t distribution for in-sample unconditional quantiles
qqTarg <- YQunc_IS[nrow(YQunc_IS), ]
list_params <- QuantilesInterpolation_env$QuantilesInterpolation(qqTarg, QQ) #corretto!!
lc <- list_params$lc
sc <- list_params$sc
sh <- list_params$sh
df <- list_params$df
# Assign values to matrices based on the skewed-t fit
densities <- dst(YY, xi = lc, omega = sc, alpha = sh, nu = df)
replicated_matrix <- matrix(rep(densities, each = length(Time) - h), ncol = length(densities))
PSTunc_IS[(h + 1):nrow(PSTunc_IS), ] <- replicated_matrix
densities <- qst(QQ, xi = lc, omega = sc, alpha = sh, nu = df)
replicated_matrix <- matrix(rep(densities, each = length(Time) - h), ncol = length(densities))
QSTunc_IS[(h + 1):nrow(QSTunc_IS), ] <- replicated_matrix
densities <- pst(YY, xi = lc, omega = sc, alpha = sh, nu = df)
replicated_matrix <- matrix(rep(densities, each = length(Time) - h), ncol = length(densities))
CSTunc_IS[(h + 1):nrow(CSTunc_IS), ] <- replicated_matrix
STparunc_IS[(h + 1):nrow(STparunc_IS), ] <- matrix(rep(c(lc, sc, sh, df), times = length(Time) - h),
nrow = length(Time) - h,
byrow = TRUE)
ScoreSTunc_IS[(h + 1):length(Yh)] <- dst(Yh[(h + 1):length(Yh)], xi = lc, omega = sc, alpha = sh, nu = df) #1x172, su matlab è 171x1, vediamo se causa problemi
PitSTunc_IS[(h + 1):length(Yh)] <- pst(Yh[(h + 1):length(Yh)], xi = lc, omega = sc, alpha = sh, nu = df) #1x172, su matlab è 171x1, vediamo se causa problemi
}
#---------------------    %% Fit t-densities for in-sample and out-of-sample estimation
{
for (jt in 1:(length(Time) - h)) { #-50 da togliere
month_val <- as.numeric(format(Time[jt], "%m"))
year_val <- as.numeric(format(Time[jt], "%Y"))
if (month_val == 1 && jt >= jtFirstOOS) {
cat(sprintf("Computing in-sample and out-of-sample predictive densities in %d", year_val), "\n")
} else {
cat(sprintf("Computing in-sample predictive densities in %d", year_val), "\n")
}
YhRealized <- Yh[jt + h]
qqTarg <- YQ_IS[jt + h, ]
params <- QuantilesInterpolation_env$QuantilesInterpolation(qqTarg, QQ)  # You might need to adjust this function to return params in appropriate format for dst, qst, pst
lc <- params$lc
sc <- params$sc
sh <- params$sh
df <- params$df
PST_IS[jt + h, ] <- dst(YY, lc, sc, sh, df) #uguale a matlab, almeno per le prime iterazioni
QST_IS[jt + h, ] <- qst(QQ, lc, sc, sh, df)
CST_IS[jt + h, ] <- pst(YY, lc, sc, sh, df)
STpar_IS[jt + h, ] <- c(lc, sc, sh, df)
ScoreST_IS[jt + h ] <- dst(YhRealized, lc, sc, sh, df)
PitST_IS[jt + h ] <- pst(YhRealized, lc, sc, sh, df)
Temp <- PST_IS[jt + h, ] * (YY < QST_IS[jt + h, jq50])
LeftEntropy_IS[jt + h] <- -sum((log(PSTunc_IS[jt + h, ]) - log(PST_IS[jt + h, ])) * Temp * deltaYY) #CORRETTO!
# Similar computations for GDP only
qqTarg_GDPonly <- YQGDPonly_IS[jt + h, ]
params <- QuantilesInterpolation_env$QuantilesInterpolation(qqTarg_GDPonly, QQ)
lc <- params$lc
sc <- params$sc
sh <- params$sh
df <- params$df
PSTGDPonly_IS[jt + h, ] <- dst(YY, lc, sc, sh, df)
QSTGDPonly_IS[jt + h, ] <- qst(QQ, lc, sc, sh, df)
CSTGDPonly_IS[jt + h, ] <- pst(YY, lc, sc, sh, df) #uguale a matlab, almeno per le prime iterazioni
STparGDPonly_IS[jt + h, ] <- c(lc, sc, sh, df)
ScoreSTGDPonly_IS[jt + h] <- dst(YhRealized, lc, sc, sh, df)
PitSTGDPonly_IS[jt + h] <- pst(YhRealized, lc, sc, sh, df) #uguale a matlab, almeno per le prime iterazioni
if (jt >= jtFirstOOS) {
if (month(Time[jt]) == 1) {
cat(sprintf("Now computing the real-time predictive densities in %d", year(Time[jt])), "\n")
}
for (jq in 1:length(QQ)) {
# Quantile regression with both NFCI and GDP, out-of-sample
b <- rq(Yh[(h + 1):jt] ~ Z[1:(jt - h),-1], QQ[jq])
YQ_OOS[jt + h, jq] <- Z[jt, ] %*% coef(b)
# b <- rq(Yh[(h + 1):length(Yh)] ~ Z[1:(length(Yh) - h),-1], tau=QQ[jq]) this is in sample, for comparison
# YQ_IS[(h + 1):length(Yh), jq] <- as.vector(Z[1:(length(Yh) - h),] %*% coef(b))
#
# Quantile regression with GDP only, out-of-sample
bGDPonly <- rq(Yh[(h + 1):jt] ~ ZGDPonly[1:(jt- h),-1], tau=QQ[jq])
YQGDPonly_OOS[jt + h, jq] <- ZGDPonly[jt, ] %*% coef(bGDPonly)
# Unconditional quantiles, out-of-sample
bunc <- rq(Yh[(h + 1):jt ] ~ 1, QQ[jq])
YQunc_OOS[jt + h, jq] <- coef(bunc)
#YQunc_IS[(h + 1):length(Yh), jq] <- rep(coef(bunc), length(Time) - h)
}
# Fit skewed-t distribution for quantile regression with NFCI and GDP, out-of-sample
params <- QuantilesInterpolation_env$QuantilesInterpolation(YQ_OOS[jt + h, ], QQ)
PST_OOS[jt + h, ] <- dst(YY, params$lc, params$sc, params$sh, params$df)
QST_OOS[jt + h, ] <- qst(QQ, params$lc, params$sc, params$sh, params$df)
CST_OOS[jt + h, ] <- pst(YY, params$lc, params$sc, params$sh, params$df)
STpar_OOS[jt + h, ] <- c(params$lc, params$sc, params$sh, params$df)
ScoreST_OOS[jt + h] <- dst(YhRealized, params$lc, params$sc, params$sh, params$df)
PitST_OOS[jt + h] <- pst(YhRealized, params$lc, params$sc, params$sh, params$df)
# Fit skewed-t distribution for quantile regression with GDP only, out-of-sample
params_GDPonly <- QuantilesInterpolation_env$QuantilesInterpolation(YQGDPonly_OOS[jt + h, ], QQ)
PSTGDPonly_OOS[jt + h, ] <- dst(YY, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
QSTGDPonly_OOS[jt + h, ] <- qst(QQ, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
CSTGDPonly_OOS[jt + h, ] <- pst(YY, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
STparGDPonly_OOS[jt + h, ] <- c(params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
ScoreSTGDPonly_OOS[jt + h] <- dst(YhRealized, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
PitSTGDPonly_OOS[jt + h] <- pst(YhRealized, params_GDPonly$lc, params_GDPonly$sc, params_GDPonly$sh, params_GDPonly$df)
# Fit skewed t-distribution for unconditional quantiles, out-of-sample
params_unc <- QuantilesInterpolation_env$QuantilesInterpolation(YQunc_OOS[jt + h, ], QQ)
PSTunc_OOS[jt + h, ] <- dst(YY, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
QSTunc_OOS[jt + h, ] <- qst(QQ, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
CSTunc_OOS[jt + h, ] <- pst(YY, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
STparunc_OOS[jt + h, ] <- c(params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
ScoreSTunc_OOS[jt + h] <- dst(YhRealized, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
PitSTunc_OOS[jt + h] <- pst(YhRealized, params_unc$lc, params_unc$sc, params_unc$sh, params_unc$df)
# Compute entropy for skewed t-distribution from quantile regression with GDP and NFCI, out-of-sample
Temp <- PST_OOS[jt + h, ] * (YY < QST_OOS[jt + h, jq50])
LeftEntropy_OOS[jt + h] <- -sum((log(PSTunc_OOS[jt + h, ]) - log(PST_OOS[jt + h, ])) * Temp * deltaYY)
}
}
}
filename <- paste("ResOOS_H", h, ".RData", sep="")
cat(paste("Saving results to file", filename, "\n"))
# Save all the variables to the .RData file
save(
YQ_IS,      YQ_OOS,      YQGDPonly_IS,      YQGDPonly_OOS,      YQunc_IS,      YQunc_OOS,
PST_IS,     PST_OOS,     PSTGDPonly_IS,     PSTGDPonly_OOS,     PSTunc_IS,     PSTunc_OOS,
QST_IS,     QST_OOS,     QSTGDPonly_IS,     QSTGDPonly_OOS,     QSTunc_IS,     QSTunc_OOS,
CST_IS,     CST_OOS,     CSTGDPonly_IS,     CSTGDPonly_OOS,     CSTunc_IS,     CSTunc_OOS,
STpar_IS,   STpar_OOS,   STparGDPonly_IS,   STparGDPonly_OOS,   STparunc_IS,   STparunc_OOS,
ScoreST_IS, ScoreST_OOS, ScoreSTGDPonly_IS, ScoreSTGDPonly_OOS, ScoreSTunc_IS, ScoreSTunc_OOS,
PitST_IS,   PitST_OOS,   PitSTGDPonly_IS,   PitSTGDPonly_OOS,   PitSTunc_IS,   PitSTunc_OOS,
LeftEntropy_IS, LeftEntropy_OOS,
file=filename
)
rm(filename)  # equivalent to MATLAB's clear('filename')
}
filename <- paste("ResOOS_H", h, ".RData", sep="")
cat(paste("Loading results from file", filename, "\n"))
load(filename)
setwd("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/R version of Adrian's code")
filename <- paste("ResOOS_H", h, ".RData", sep="")
cat(paste("Loading results from file", filename, "\n"))
load(filename)
View(YQ_IS)
