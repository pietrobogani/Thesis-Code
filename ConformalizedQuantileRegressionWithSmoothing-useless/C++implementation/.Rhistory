library(dplyr)
library(tidyverse)
# Set parameters
lambdaA <- 0.001  # rate of failure for component A
lambdaB <- 0.02 # rate of failure for component B
lambdaC <- 0.05 # rate of failure for component C
muA <- 0.03     # recovery rate for component A
muB <- 0.05     # recovery rate for component B
muC <- 0.005     # recovery rate for component C
n_runs <- 1000 # number of simulation runs
t_max <- 500    # max time
simulate_one_run <- function(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max) {
# Initialization
stateA <- 0
stateB <- 0
stateC <- 0
t <- 0
system_states <- vector(mode = "numeric", length = t_max)
while (t < t_max) {
ttfA <- if (stateA == 0) rexp(1, rate = lambdaA) else rexp(1, rate = muA)
ttfB <- if (stateB == 0) rexp(1, rate = lambdaB) else rexp(1, rate = muB)
ttfC <- if (stateC == 0) rexp(1, rate = lambdaC) else rexp(1, rate = muC)
min_ttf <- min(ttfA, ttfB, ttfC)
t_next <- t + min_ttf
t_next <- min(t_next, t_max) # Ensure t_next does not exceed t_max
# Record the system state at each time step until the next event
for (t_step in (t+1):t_next) {
system_states[t_step] <- ifelse(stateA == 1 || (stateB == 1 && stateC == 1), 1, 0)
}
t <- t_next
if (min_ttf == ttfA) {
stateA <- 1 - stateA
} else if (min_ttf == ttfB) {
stateB <- 1 - stateB
} else {
stateC <- 1 - stateC
}
}
# Return the vector of system states at each time step
return(system_states)
}
# Run the simulation
df <- tibble(run = 1:n_runs) %>%
mutate(system_states = map(run, ~simulate_one_run(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max)))
# Create a matrix from the list column
system_states_matrix <- do.call(rbind, df$system_states)
# Convert the matrix to a data frame
df_wide <- as.data.frame(system_states_matrix)
# Add the run column
df_wide$run <- df$run
# Remove the run column for the calculation
df_wide_without_run <- df_wide[, -ncol(df_wide)]
# Calculate the instantaneous availability at each time step
availability <- 1 - colMeans(df_wide_without_run)
# Convert it to a data frame for easier handling
availability_df <- data.frame(time = 1:length(availability), availability = availability)
# Now availability_df contains the estimated availability at each time step
# Subset the data to exclude the last time step
availability_df_sub <- availability_df[-nrow(availability_df), ]
# Plot the availability over time, excluding the last time step
ggplot(availability_df_sub, aes(x = time, y = availability)) +
geom_line() +
labs(x = "Time", y = "Availability", title = "System Availability Over Time")
# Load the necessary library
library(purrr)
library(dplyr)
library(tidyverse)
# Set parameters
lambdaA <- 0.001  # rate of failure for component A
lambdaB <- 0.02 # rate of failure for component B
lambdaC <- 0.05 # rate of failure for component C
muA <- 0.03     # recovery rate for component A
muB <- 0.05     # recovery rate for component B
muC <- 0.005     # recovery rate for component C
n_runs <- 1000 # number of simulation runs
t_max <- 500    # max time
simulate_one_run <- function(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max) {
# Initialization
stateA <- 0
stateB <- 0
stateC <- 0
t <- 0
system_states <- vector(mode = "numeric", length = t_max)
while (t < t_max) {
ttfA <- if (stateA == 0) rexp(1, rate = lambdaA) else rexp(1, rate = muA)
ttfB <- if (stateB == 0) rexp(1, rate = lambdaB) else rexp(1, rate = muB)
ttfC <- if (stateC == 0) rexp(1, rate = lambdaC) else rexp(1, rate = muC)
min_ttf <- min(ttfA, ttfB, ttfC)
t_next <- t + min_ttf
t_next <- min(t_next, t_max) # Ensure t_next does not exceed t_max
# Record the system state at each time step until the next event
for (t_step in (t+1):t_next) {
system_states[t_step] <- ifelse(stateA == 1 || (stateB == 1 && stateC == 1), 1, 0)
}
t <- t_next
if (min_ttf == ttfA) {
stateA <- 1 - stateA
} else if (min_ttf == ttfB) {
stateB <- 1 - stateB
} else {
stateC <- 1 - stateC
}
}
# Return the vector of system states at each time step
return(system_states)
}
# Run the simulation
df <- tibble(run = 1:n_runs) %>%
mutate(system_states = map(run, ~simulate_one_run(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max)))
# Create a matrix from the list column
system_states_matrix <- do.call(rbind, df$system_states)
# Convert the matrix to a data frame
df_wide <- as.data.frame(system_states_matrix)
# Add the run column
df_wide$run <- df$run
# Remove the run column for the calculation
df_wide_without_run <- df_wide[, -ncol(df_wide)]
# Calculate the instantaneous availability at each time step
availability <- 1 - colMeans(df_wide_without_run)
# Convert it to a data frame for easier handling
availability_df <- data.frame(time = 1:length(availability), availability = availability)
# Now availability_df contains the estimated availability at each time step
# Subset the data to exclude the last time step
availability_df_sub <- availability_df[-nrow(availability_df), ]
# Plot the availability over time, excluding the last time step
ggplot(availability_df_sub, aes(x = time, y = availability)) +
geom_line() +
labs(x = "Time", y = "Availability", title = "System Availability Over Time")
# Load the necessary library
library(purrr)
library(dplyr)
library(tidyverse)
# Set parameters
lambdaA <- 0.001  # rate of failure for component A
lambdaB <- 0.02 # rate of failure for component B
lambdaC <- 0.05 # rate of failure for component C
muA <- 0.03     # recovery rate for component A
muB <- 0.05     # recovery rate for component B
muC <- 0.005     # recovery rate for component C
n_runs <- 1000 # number of simulation runs
t_max <- 500    # max time
simulate_one_run <- function(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max) {
# Initialization
stateA <- 0
stateB <- 0
stateC <- 0
t <- 0
system_states <- vector(mode = "numeric", length = t_max)
while (t < t_max) {
ttfA <- if (stateA == 0) rexp(1, rate = lambdaA) else rexp(1, rate = muA)
ttfB <- if (stateB == 0) rexp(1, rate = lambdaB) else rexp(1, rate = muB)
ttfC <- if (stateC == 0) rexp(1, rate = lambdaC) else rexp(1, rate = muC)
min_ttf <- min(ttfA, ttfB, ttfC)
t_next <- t + min_ttf
t_next <- min(t_next, t_max) # Ensure t_next does not exceed t_max
# Record the system state at each time step until the next event
for (t_step in (t+1):t_next) {
system_states[t_step] <- ifelse(stateA == 1 || (stateB == 1 && stateC == 1), 1, 0)
}
t <- t_next
if (min_ttf == ttfA) {
stateA <- 1 - stateA
} else if (min_ttf == ttfB) {
stateB <- 1 - stateB
} else {
stateC <- 1 - stateC
}
}
# Return the vector of system states at each time step
return(system_states)
}
# Run the simulation
df <- tibble(run = 1:n_runs) %>%
mutate(system_states = map(run, ~simulate_one_run(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max)))
# Create a matrix from the list column
system_states_matrix <- do.call(rbind, df$system_states)
# Convert the matrix to a data frame
df_wide <- as.data.frame(system_states_matrix)
# Add the run column
df_wide$run <- df$run
# Remove the run column for the calculation
df_wide_without_run <- df_wide[, -ncol(df_wide)]
# Calculate the instantaneous availability at each time step
availability <- 1 - colMeans(df_wide_without_run)
# Convert it to a data frame for easier handling
availability_df <- data.frame(time = 1:length(availability), availability = availability)
# Now availability_df contains the estimated availability at each time step
# Subset the data to exclude the last time step
availability_df_sub <- availability_df[-nrow(availability_df), ]
# Plot the availability over time, excluding the last time step
ggplot(availability_df_sub, aes(x = time, y = availability)) +
geom_line() +
labs(x = "Time", y = "Availability", title = "System Availability Over Time")
# Load the necessary library
library(purrr)
library(dplyr)
library(tidyverse)
# Set parameters
lambdaA <- 0.001  # rate of failure for component A
lambdaB <- 0.02 # rate of failure for component B
lambdaC <- 0.05 # rate of failure for component C
muA <- 0.03     # recovery rate for component A
muB <- 0.05     # recovery rate for component B
muC <- 0.005     # recovery rate for component C
n_runs <- 1000 # number of simulation runs
t_max <- 500    # max time
simulate_one_run <- function(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max) {
# Initialization
stateA <- 0
stateB <- 0
stateC <- 0
t <- 0
system_states <- vector(mode = "numeric", length = t_max)
while (t < t_max) {
ttfA <- if (stateA == 0) rexp(1, rate = lambdaA) else rexp(1, rate = muA)
ttfB <- if (stateB == 0) rexp(1, rate = lambdaB) else rexp(1, rate = muB)
ttfC <- if (stateC == 0) rexp(1, rate = lambdaC) else rexp(1, rate = muC)
min_ttf <- min(ttfA, ttfB, ttfC)
t_next <- t + min_ttf
t_next <- min(t_next, t_max) # Ensure t_next does not exceed t_max
# Record the system state at each time step until the next event
for (t_step in (t+1):t_next) {
system_states[t_step] <- ifelse(stateA == 1 || (stateB == 1 && stateC == 1), 1, 0)
}
t <- t_next
if (min_ttf == ttfA) {
stateA <- 1 - stateA
} else if (min_ttf == ttfB) {
stateB <- 1 - stateB
} else {
stateC <- 1 - stateC
}
}
# Return the vector of system states at each time step
return(system_states)
}
# Run the simulation
df <- tibble(run = 1:n_runs) %>%
mutate(system_states = map(run, ~simulate_one_run(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max)))
# Create a matrix from the list column
system_states_matrix <- do.call(rbind, df$system_states)
# Convert the matrix to a data frame
df_wide <- as.data.frame(system_states_matrix)
# Add the run column
df_wide$run <- df$run
# Remove the run column for the calculation
df_wide_without_run <- df_wide[, -ncol(df_wide)]
# Calculate the instantaneous availability at each time step
availability <- 1 - colMeans(df_wide_without_run)
# Convert it to a data frame for easier handling
availability_df <- data.frame(time = 1:length(availability), availability = availability)
# Now availability_df contains the estimated availability at each time step
# Subset the data to exclude the last time step
availability_df_sub <- availability_df[-nrow(availability_df), ]
# Plot the availability over time, excluding the last time step
ggplot(availability_df_sub, aes(x = time, y = availability)) +
geom_line() +
labs(x = "Time", y = "Availability", title = "System Availability Over Time")
# Calculate the instantaneous availability at each time step
availability <- colMeans(df_wide_without_run)
# Convert it to a data frame for easier handling
availability_df <- data.frame(time = 1:length(availability), availability = availability)
# Subset the data to exclude the last time step
availability_df_sub <- availability_df[-nrow(availability_df), ]
# Plot the availability over time, excluding the last time step
ggplot(availability_df_sub, aes(x = time, y = availability)) +
geom_line() +
labs(x = "Time", y = "Availability", title = "System Availability Over Time")
# Remove the run column for the calculation
df_wide_without_run <- df_wide[, -ncol(df_wide)]
# Calculate the instantaneous availability at each time step
availability <- 1 - colMeans(df_wide_without_run)
# Convert it to a data frame for easier handling
availability_df <- data.frame(time = 1:length(availability), availability = availability)
# Now availability_df contains the estimated availability at each time step
# Subset the data to exclude the last time step
availability_df_sub <- availability_df[-nrow(availability_df), ]
# Plot the availability over time, excluding the last time step
ggplot(availability_df_sub, aes(x = time, y = availability)) +
geom_line() +
labs(x = "Time", y = "Availability", title = "System Availability Over Time")
------------------ Calculate reliability as a function of time --------------------------
# Load the necessary library
library(purrr)
library(dplyr)
# Set parameters
lambdaA <- 0.001  # rate of failure for component A
lambdaB <- 0.02 # rate of failure for component B
lambdaC <- 0.05 # rate of failure for component C
muA <- 0.03     # recovery rate for component A
muB <- 0.05     # recovery rate for component B
muC <- 0.005     # recovery rate for component C
n_runs <- 10000 # number of simulation runs
t_max <- 1000    # max time
# Initialize the data frame
df <- data.frame(run = 1:n_runs)
# Function to simulate one run
simulate_one_run <- function(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max) {
# Initialize the states of components A, B, and C to "working" (0)
stateA <- 0
stateB <- 0
stateC <- 0
t <- 0
while (t < t_max) {
# Exponential random variable for time to failure or recovery
ttfA <- if (stateA == 0) rexp(1, rate = lambdaA) else rexp(1, rate = muA)
ttfB <- if (stateB == 0) rexp(1, rate = lambdaB) else rexp(1, rate = muB)
ttfC <- if (stateC == 0) rexp(1, rate = lambdaC) else rexp(1, rate = muC)
# Find the minimum time to event and update the time and states
min_ttf <- min(ttfA, ttfB, ttfC)
t <- t + min_ttf
t <- min(t, t_max) # Ensure t does not exceed t_max
if (min_ttf == ttfA) {
stateA <- 1 - stateA
} else if (min_ttf == ttfB) {
stateB <- 1 - stateB
} else {
stateC <- 1 - stateC
}
# Check if the system is still working (A in state 0 or both B and C in state 0)
if (stateA == 0 || (stateB == 0 && stateC == 0)) {
next
} else {
return(t)
}
}
return(t)
}
# Run the simulation
df <- df %>%
mutate(time_to_failure = map_dbl(run, ~simulate_one_run(lambdaA, lambdaB, lambdaC, muA, muB, muC, t_max)))
# Calculate reliability at each time point
reliability <- data.frame(time = seq(0, t_max, by = 1))
reliability <- reliability %>%
mutate(reliability = map_dbl(time, ~mean(df$time_to_failure > .)))
reliability
#------------------- Plot Reliability ----------------------
# Load the necessary library
library(ggplot2)
# Exclude the last row of the reliability data frame
reliability_excl_last <- head(reliability, n = nrow(reliability) - 1)
# Plot the reliability over time
ggplot(reliability_excl_last, aes(x = time, y = reliability)) +
geom_line() +
labs(x = "Time", y = "Estimated Reliability", title = "Time-Dependent System Reliability") +
theme_minimal()
View(cervezas)
unique(cervezas$nota.global)
cervezas <- read.csv("C:/Users/Pietro/Desktop/Pietro/Politecnico/Erasmus/Redes_neurales_y_algoritmos_geneticos/datasets/datasets_csv/cervezas.csv")
which(is.na(cervezas), arr.ind=TRUE) #There are 600 NA
#cervezas <- cervezas[,-c(1,3,7,11,13)] #Remove useless columns
cervezas <- na.omit(cervezas) #Remove rows with at least 1 NA
View(cervezas)
library(neuralnet)
library(ggplot2)
library(dplyr)
library(tictoc)
cervezas <- read.csv("C:/Users/Pietro/Desktop/Pietro/Politecnico/Erasmus/Redes_neurales_y_algoritmos_geneticos/datasets/datasets_csv/cervezas.csv")
which(is.na(cervezas), arr.ind=TRUE) #There are 600 NA
#cervezas <- cervezas[,-c(1,3,7,11,13)] #Remove useless columns
cervezas <- na.omit(cervezas) #Remove rows with at least 1 NA
View(cervezas)
View(cervezas_good)
library(neuralnet)
library(ggplot2)
library(dplyr)
library(tictoc)
cervezas <- read.csv("C:/Users/Pietro/Desktop/Pietro/Politecnico/Erasmus/Redes_neurales_y_algoritmos_geneticos/datasets/datasets_csv/cervezas.csv")
which(is.na(cervezas), arr.ind=TRUE) #There are 600 NA
#cervezas <- cervezas[,-c(1,3,7,11,13)] #Remove useless columns
cervezas <- na.omit(cervezas) #Remove rows with at least 1 NA
View(cervezas)
cervezas <- cervezas[,-c(1,3,7,11,13)] #Remove useless columns
cervezas <- read.csv("C:/Users/Pietro/Desktop/Pietro/Politecnico/Erasmus/Redes_neurales_y_algoritmos_geneticos/datasets/datasets_csv/cervezas.csv")
which(is.na(cervezas), arr.ind=TRUE) #There are 600 NA
cervezas <- cervezas[,-c(1,3,7,8,11,13)] #Remove useless columns
#print row
# Assume that 'df' is your data frame and you want to print the 1st row
row <- cervezas[484, ]
pretty_row <- data.frame(t(row))
print(pretty_row)
kable(cervezas[484, ], format = "pipe", col.names = names(cervezas))
#print row
# Assume that 'df' is your data frame and you want to print the 1st row
# Assuming 'df' is your DataFrame
library(knitr)
kable(cervezas[484, ], format = "pipe", col.names = names(cervezas))
# Assuming 'df' is your DataFrame
library(DT)
datatable(cervezas[484, ])
datatable(cervezas[48, ])
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/Conformalized Quantile Regression/C++ implementation/testlibraries.cpp")
# Call the function from R
result <- optimizeRosenbrock()
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/Conformalized Quantile Regression/C++ implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/Conformalized Quantile Regression/C++ implementation/testlibraries.cpp")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Call the function from R
result <- optimizeRosenbrock()
print(result)
# Call the function from R
result <- optimizeRosenbrock()
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Call the function from R
result <- optimizeRosenbrock()
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Call the function from R
result <- optimizeRosenbrock()
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/examples/example-rosenbrock.cpp")
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming you've sourced the C++ code already
result <- optimizeQuadratic()
# Print the optimization result
print(result)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
install.packages("RcppEigen")
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
Rcpp:::RcppEigen.includeDirs()
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming your C++ file is named "optimizeRosenbrock.cpp"
library(RcppEigen)
library(Rcpp)
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/testlibraries.cpp")
# Assuming you've sourced the C++ code already
result <- optimizeQuadratic()
# Optimize Himmelblau's function
result_himmelblau <- optimizeFunction("Himmelblau")
print(result_himmelblau)
# Optimize Beale's function
result_beale <- optimizeFunction("Beale")
print(result_beale)
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
# Load necessary libraries
library(Rcpp)
setwd("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation")
# Load necessary libraries
library(Rcpp)
library(sn)  # Only if you need to use the sn package in R as well
# Source the C++ code
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
# Load necessary libraries
library(Rcpp)
library(sn)  # Only if you need to use the sn package in R as well
# Source the C++ code
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
# Source the C++ code
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
# Load necessary libraries
library(Rcpp)
library(sn)  # Only if you need to use the sn package in R as well
# Source the C++ code
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
# Load necessary libraries
library(Rcpp)
library(sn)  # Only if you need to use the sn package in R as well
# Source the C++ code
Sys.setenv(PKG_CXXFLAGS="-IC:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/LBFGSpp-master/LBFGSpp-master/include")
Rcpp::sourceCpp("C:/Users/Pietro/Desktop/Pietro/Politecnico/Tesi/Thesis-Code/ConformalizedQuantileRegression/C++implementation/QuantilesInterpolationC++.cpp")
qsc
qst_bounds
qst
qst_bounds
